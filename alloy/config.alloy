// Alloy configuration for Obsidian note monitoring
// This configuration reads JSON log entries and forwards them to Loki

// Local file source to read the JSON log file
loki.source.file "obsidian_logs" {
  targets = [
    {
      __path__ = "/logs/obsidian_logs.json",
      job = "obsidian-parser",
    },
    {
      __path__ = "/logs/obsidian_parser.log",
      job = "obsidian-cron",
    },
  ]
  forward_to = [loki.process.obsidian_logs.receiver]
}

// Process the log entries to extract labels and format for Loki
loki.process "obsidian_logs" {
  forward_to = [loki.write.loki.receiver]

  // Try to parse as JSON first (for obsidian_logs.json)
  stage.json {
    expressions = {
      timestamp = "timestamp",
      note_name = "labels.note_name",
      vault = "labels.vault",
      job = "labels.job",
      tags = "labels.tags",
      frontmatter_status = "labels.frontmatter_status",
      frontmatter_category = "labels.frontmatter_category",
      frontmatter_priority = "labels.frontmatter_priority",
    }
  }

  // Set the timestamp from the JSON (only if JSON parsing succeeded)
  stage.timestamp {
    source = "timestamp"
    format = "RFC3339"
  }

  // Set labels for Loki (only for JSON entries)
  stage.labels {
    values = {
      note_name = "",
      vault = "",
      job = "",
      tags = "",
      status = "",
      category = "",
      priority = "",
    }
  }

  // For JSON entries, clean up the log line
  stage.json {
    expressions = {
      log_line = "line",
    }
  }

  // For plain text entries (cron logs), keep the original line
  stage.regex {
    expression = "^(?P<log_line>.*)$"
  }

  // Set the final log line
  stage.output {
    source = "log_line"
  }
}

// Write to Loki
loki.write "loki" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}
